{'filename': [{'word': 'absname(', 'kind': 'f', 'abbr': 'absname(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'absname(', 'kind': 'f', 'abbr': 'absname(Filename, Dir) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'absname_join(', 'kind': 'f', 'abbr': 'absname_join(Dir, Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append/2', 'dup': 1}, {'word': 'basename(', 'kind': 'f', 'abbr': 'basename(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'basename(', 'kind': 'f', 'abbr': 'basename(Filename, Ext) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'dirname(', 'kind': 'f', 'abbr': 'dirname(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'extension(', 'kind': 'f', 'abbr': 'extension(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'find_src(', 'kind': 'f', 'abbr': 'find_src/1', 'dup': 1}, {'word': 'find_src(', 'kind': 'f', 'abbr': 'find_src/2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'join(', 'kind': 'f', 'abbr': 'join(Components) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'join(', 'kind': 'f', 'abbr': 'join(Name1, Name2) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nativename(', 'kind': 'f', 'abbr': 'nativename(Path) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'pathtype(', 'kind': 'f', 'abbr': 'pathtype(Path) -> absolute | relative | volumerelative', 'dup': 1}, {'word': 'rootname(', 'kind': 'f', 'abbr': 'rootname(Filename) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'rootname(', 'kind': 'f', 'abbr': 'rootname(Filename, Ext) -> \fBfile:filename()\fR\&', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(Filename) -> Components', 'dup': 1}]}
{'array': [{'word': 'default(', 'kind': 'f', 'abbr': 'default/1', 'dup': 1}, {'word': 'fix(', 'kind': 'f', 'abbr': 'fix/1', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl/3', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr/3', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list/1', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list/2', 'dup': 1}, {'word': 'from_orddict(', 'kind': 'f', 'abbr': 'from_orddict/1', 'dup': 1}, {'word': 'from_orddict(', 'kind': 'f', 'abbr': 'from_orddict/2', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get/2', 'dup': 1}, {'word': 'is_array(', 'kind': 'f', 'abbr': 'is_array/1', 'dup': 1}, {'word': 'is_fix(', 'kind': 'f', 'abbr': 'is_fix/1', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map/2', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> array()', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> array()', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new/2', 'dup': 1}, {'word': 'relax(', 'kind': 'f', 'abbr': 'relax/1', 'dup': 1}, {'word': 'reset(', 'kind': 'f', 'abbr': 'reset/2', 'dup': 1}, {'word': 'resize(', 'kind': 'f', 'abbr': 'resize/1', 'dup': 1}, {'word': 'resize(', 'kind': 'f', 'abbr': 'resize/2', 'dup': 1}, {'word': 'set(', 'kind': 'f', 'abbr': 'set/3', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size/1', 'dup': 1}, {'word': 'sparse_foldl(', 'kind': 'f', 'abbr': 'sparse_foldl/3', 'dup': 1}, {'word': 'sparse_foldr(', 'kind': 'f', 'abbr': 'sparse_foldr/3', 'dup': 1}, {'word': 'sparse_map(', 'kind': 'f', 'abbr': 'sparse_map/2', 'dup': 1}, {'word': 'sparse_size(', 'kind': 'f', 'abbr': 'sparse_size/1', 'dup': 1}, {'word': 'sparse_to_list(', 'kind': 'f', 'abbr': 'sparse_to_list/1', 'dup': 1}, {'word': 'sparse_to_orddict(', 'kind': 'f', 'abbr': 'sparse_to_orddict/1', 'dup': 1}, {'word': 'to_list(', 'kind': 'f', 'abbr': 'to_list/1', 'dup': 1}, {'word': 'to_orddict(', 'kind': 'f', 'abbr': 'to_orddict/1', 'dup': 1}]}
{'calendar': [{'word': 'date_to_gregorian_days(', 'kind': 'f', 'abbr': 'date_to_gregorian_days(Date) -> Days', 'dup': 1}, {'word': 'date_to_gregorian_days(', 'kind': 'f', 'abbr': 'date_to_gregorian_days(Year, Month, Day) -> Days', 'dup': 1}, {'word': 'datetime_to_gregorian_seconds(', 'kind': 'f', 'abbr': 'datetime_to_gregorian_seconds(DateTime) -> Seconds', 'dup': 1}, {'word': 'day_of_the_week(', 'kind': 'f', 'abbr': 'day_of_the_week(Date) -> \fBdaynum()\fR\&', 'dup': 1}, {'word': 'day_of_the_week(', 'kind': 'f', 'abbr': 'day_of_the_week(Year, Month, Day) -> \fBdaynum()\fR\&', 'dup': 1}, {'word': 'gregorian_days_to_date(', 'kind': 'f', 'abbr': 'gregorian_days_to_date(Days) -> \fBdate()\fR\&', 'dup': 1}, {'word': 'gregorian_seconds_to_datetime(', 'kind': 'f', 'abbr': 'gregorian_seconds_to_datetime(Seconds) -> \fBdatetime()\fR\&', 'dup': 1}, {'word': 'is_leap_year(', 'kind': 'f', 'abbr': 'is_leap_year(Year) -> boolean()', 'dup': 1}, {'word': 'iso_week_number(', 'kind': 'f', 'abbr': 'iso_week_number() -> \fByearweeknum()\fR\&iso_week_number(Date) -> \fByearweeknum()\fR\&', 'dup': 1}, {'word': 'iso_week_number(', 'kind': 'f', 'abbr': 'iso_week_number() -> \fByearweeknum()\fR\&iso_week_number(Date) -> \fByearweeknum()\fR\&', 'dup': 1}, {'word': 'last_day_of_the_month(', 'kind': 'f', 'abbr': 'last_day_of_the_month(Year, Month) -> LastDay', 'dup': 1}, {'word': 'local_time(', 'kind': 'f', 'abbr': 'local_time() -> \fBdatetime()\fR\&', 'dup': 1}, {'word': 'local_time_to_universal_time(', 'kind': 'f', 'abbr': 'local_time_to_universal_time(DateTime1) -> DateTime2', 'dup': 1}, {'word': 'local_time_to_universal_time(', 'kind': 'f', 'abbr': 'local_time_to_universal_time/2', 'dup': 1}, {'word': 'local_time_to_universal_time_dst(', 'kind': 'f', 'abbr': 'local_time_to_universal_time_dst(DateTime1) -> [DateTime]', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'now_to_datetime(', 'kind': 'f', 'abbr': 'now_to_datetime(Now) -> \fBdatetime1970()\fR\&', 'dup': 1}, {'word': 'now_to_local_time(', 'kind': 'f', 'abbr': 'now_to_local_time(Now) -> \fBdatetime1970()\fR\&', 'dup': 1}, {'word': 'now_to_universal_time(', 'kind': 'f', 'abbr': 'now_to_universal_time(Now) -> \fBdatetime1970()\fR\&', 'dup': 1}, {'word': 'seconds_to_daystime(', 'kind': 'f', 'abbr': 'seconds_to_daystime(Seconds) -> {Days, Time}', 'dup': 1}, {'word': 'seconds_to_time(', 'kind': 'f', 'abbr': 'seconds_to_time(Seconds) -> \fBtime()\fR\&', 'dup': 1}, {'word': 'time_difference(', 'kind': 'f', 'abbr': 'time_difference(T1, T2) -> {Days, Time}', 'dup': 1}, {'word': 'time_to_seconds(', 'kind': 'f', 'abbr': 'time_to_seconds(Time) -> \fBsecs_per_day()\fR\&', 'dup': 1}, {'word': 'universal_time(', 'kind': 'f', 'abbr': 'universal_time() -> \fBdatetime()\fR\&', 'dup': 1}, {'word': 'universal_time_to_local_time(', 'kind': 'f', 'abbr': 'universal_time_to_local_time(DateTime) -> \fBdatetime()\fR\&', 'dup': 1}, {'word': 'valid_date(', 'kind': 'f', 'abbr': 'valid_date(Date) -> boolean()', 'dup': 1}, {'word': 'valid_date(', 'kind': 'f', 'abbr': 'valid_date(Year, Month, Day) -> boolean()', 'dup': 1}]}
{'dict': [{'word': 'append(', 'kind': 'f', 'abbr': 'append(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'append_list(', 'kind': 'f', 'abbr': 'append_list(Key, ValList, Dict1) -> Dict2', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase(Key, Dict1) -> Dict2', 'dup': 1}, {'word': 'fetch(', 'kind': 'f', 'abbr': 'fetch(Key, Dict) -> Value', 'dup': 1}, {'word': 'fetch_keys(', 'kind': 'f', 'abbr': 'fetch_keys(Dict) -> Keys', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, Dict1) -> Dict2', 'dup': 1}, {'word': 'find(', 'kind': 'f', 'abbr': 'find(Key, Dict) -> {ok, Value} | error', 'dup': 1}, {'word': 'fold(', 'kind': 'f', 'abbr': 'fold(Fun, Acc0, Dict) -> Acc1', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list(List) -> Dict', 'dup': 1}, {'word': 'is_key(', 'kind': 'f', 'abbr': 'is_key(Key, Dict) -> boolean()', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, Dict1, Dict2) -> Dict3', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> dict()', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size(Dict) -> integer() >= 0', 'dup': 1}, {'word': 'store(', 'kind': 'f', 'abbr': 'store(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'to_list(', 'kind': 'f', 'abbr': 'to_list(Dict) -> List', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Initial, Dict1) -> Dict2', 'dup': 1}, {'word': 'update_counter(', 'kind': 'f', 'abbr': 'update_counter(Key, Increment, Dict1) -> Dict2', 'dup': 1}]}
{'erlang': [{'word': '(', 'kind': 'f', 'abbr': '!/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '*/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '++/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '--/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '//2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=:=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '==/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>=/2', 'dup': 1}, {'word': 'abs(', 'kind': 'f', 'abbr': 'abs(Number) -> integer() | float()', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32(Data) -> integer()', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32(OldAdler, Data) -> integer()', 'dup': 1}, {'word': 'adler32_combine(', 'kind': 'f', 'abbr': 'adler32_combine(FirstAdler, SecondAdler, SecondSize) -> integer()', 'dup': 1}, {'word': 'and(', 'kind': 'f', 'abbr': 'and/2', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append/2', 'dup': 1}, {'word': 'append_element(', 'kind': 'f', 'abbr': 'append_element(Tuple1, Term) -> Tuple2', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Fun, Args) -> term()', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Module, Function, Args) -> term()', 'dup': 1}, {'word': 'atom_to_binary(', 'kind': 'f', 'abbr': 'atom_to_binary(Atom, Encoding) -> binary()', 'dup': 1}, {'word': 'atom_to_list(', 'kind': 'f', 'abbr': 'atom_to_list(Atom) -> string()', 'dup': 1}, {'word': 'await_proc_exit(', 'kind': 'f', 'abbr': 'await_proc_exit/3', 'dup': 1}, {'word': 'band(', 'kind': 'f', 'abbr': 'band/2', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part(Subject, PosLen) -> binary()', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part(Subject, Start, Length) -> binary()', 'dup': 1}, {'word': 'binary_to_atom(', 'kind': 'f', 'abbr': 'binary_to_atom(Binary, Encoding) -> atom()', 'dup': 1}, {'word': 'binary_to_existing_atom(', 'kind': 'f', 'abbr': 'binary_to_existing_atom(Binary, Encoding) -> atom()', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list(Binary) -> [char()]', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list(Binary, Start, Stop) -> [char()]', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term(Binary) -> term()', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term(Binary, Opts) -> term()', 'dup': 1}, {'word': 'bit_size(', 'kind': 'f', 'abbr': 'bit_size(Bitstring) -> integer() >= 0', 'dup': 1}, {'word': 'bitstring_to_list(', 'kind': 'f', 'abbr': 'bitstring_to_list(Bitstring) -> [char()|bitstring()]', 'dup': 1}, {'word': 'bnot(', 'kind': 'f', 'abbr': 'bnot/1', 'dup': 1}, {'word': 'bor(', 'kind': 'f', 'abbr': 'bor/2', 'dup': 1}, {'word': 'bsl(', 'kind': 'f', 'abbr': 'bsl/2', 'dup': 1}, {'word': 'bsr(', 'kind': 'f', 'abbr': 'bsr/2', 'dup': 1}, {'word': 'bump_reductions(', 'kind': 'f', 'abbr': 'bump_reductions(Reductions) -> void()', 'dup': 1}, {'word': 'bxor(', 'kind': 'f', 'abbr': 'bxor/2', 'dup': 1}, {'word': 'byte_size(', 'kind': 'f', 'abbr': 'byte_size(Bitstring) -> integer() >= 0', 'dup': 1}, {'word': 'call_on_load_function(', 'kind': 'f', 'abbr': 'call_on_load_function/1', 'dup': 1}, {'word': 'cancel_timer(', 'kind': 'f', 'abbr': 'cancel_timer(TimerRef) -> Time | false', 'dup': 1}, {'word': 'check_old_code(', 'kind': 'f', 'abbr': 'check_old_code(Module) -> boolean()', 'dup': 1}, {'word': 'check_process_code(', 'kind': 'f', 'abbr': 'check_process_code(Pid, Module) -> boolean()', 'dup': 1}, {'word': 'concat_binary(', 'kind': 'f', 'abbr': 'concat_binary(ListOfBinaries) -> binary()', 'dup': 1}, {'word': 'crasher(', 'kind': 'f', 'abbr': 'crasher/6', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32(Data) -> integer() >= 0', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32(OldCrc, Data) -> integer() >= 0', 'dup': 1}, {'word': 'crc32_combine(', 'kind': 'f', 'abbr': 'crc32_combine(FirstCrc, SecondCrc, SecondSize) -> integer() >= 0', 'dup': 1}, {'word': 'date(', 'kind': 'f', 'abbr': 'date() -> Date', 'dup': 1}, {'word': 'decode_packet(', 'kind': 'f', 'abbr': 'decode_packet/3', 'dup': 1}, {'word': 'delay_trap(', 'kind': 'f', 'abbr': 'delay_trap/2', 'dup': 1}, {'word': 'delete_module(', 'kind': 'f', 'abbr': 'delete_module(Module) -> true | undefined', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor(MonitorRef) -> true', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor(MonitorRef, OptionList) -> boolean()', 'dup': 1}, {'word': 'dexit(', 'kind': 'f', 'abbr': 'dexit/2', 'dup': 1}, {'word': 'dgroup_leader(', 'kind': 'f', 'abbr': 'dgroup_leader/2', 'dup': 1}, {'word': 'disconnect_node(', 'kind': 'f', 'abbr': 'disconnect_node(Node) -> boolean() | ignored', 'dup': 1}, {'word': 'display(', 'kind': 'f', 'abbr': 'display(Term) -> true', 'dup': 1}, {'word': 'display_nl(', 'kind': 'f', 'abbr': 'display_nl/0', 'dup': 1}, {'word': 'display_string(', 'kind': 'f', 'abbr': 'display_string/1', 'dup': 1}, {'word': 'dist_exit(', 'kind': 'f', 'abbr': 'dist_exit/3', 'dup': 1}, {'word': 'div(', 'kind': 'f', 'abbr': 'div/2', 'dup': 1}, {'word': 'dlink(', 'kind': 'f', 'abbr': 'dlink/1', 'dup': 1}, {'word': 'dmonitor_node(', 'kind': 'f', 'abbr': 'dmonitor_node/3', 'dup': 1}, {'word': 'dmonitor_p(', 'kind': 'f', 'abbr': 'dmonitor_p/2', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/2', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/3', 'dup': 1}, {'word': 'dunlink(', 'kind': 'f', 'abbr': 'dunlink/1', 'dup': 1}, {'word': 'element(', 'kind': 'f', 'abbr': 'element(N, Tuple) -> term()', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase() -> [{Key, Val}]@erase(Key) -> Val | undefined', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase() -> [{Key, Val}]@erase(Key) -> Val | undefined', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error/1', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error/2', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit/1', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit(Pid, Reason) -> true', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size(Term) -> integer() >= 0', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size(Term, [Option]) -> integer() >= 0', 'dup': 1}, {'word': 'finish_after_on_load(', 'kind': 'f', 'abbr': 'finish_after_on_load/2', 'dup': 1}, {'word': 'float(', 'kind': 'f', 'abbr': 'float(Number) -> float()', 'dup': 1}, {'word': 'float_to_list(', 'kind': 'f', 'abbr': 'float_to_list(Float) -> string()', 'dup': 1}, {'word': 'flush_monitor_message(', 'kind': 'f', 'abbr': 'flush_monitor_message/2', 'dup': 1}, {'word': 'format_cpu_topology(', 'kind': 'f', 'abbr': 'format_cpu_topology/1', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info(Fun) -> [{Item, Info}]', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info(Fun, Item) -> {Item, Info}', 'dup': 1}, {'word': 'fun_to_list(', 'kind': 'f', 'abbr': 'fun_to_list(Fun) -> string()', 'dup': 1}, {'word': 'function_exported(', 'kind': 'f', 'abbr': 'function_exported(Module, Function, Arity) -> boolean()', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect() -> true@garbage_collect(Pid) -> boolean()', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect() -> true@garbage_collect(Pid) -> boolean()', 'dup': 1}, {'word': 'garbage_collect_message_area(', 'kind': 'f', 'abbr': 'garbage_collect_message_area/0', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get() -> [{Key, Val}]@get(Key) -> Val | undefined', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get() -> [{Key, Val}]@get(Key) -> Val | undefined', 'dup': 1}, {'word': 'get_cookie(', 'kind': 'f', 'abbr': 'get_cookie() -> Cookie | nocookie', 'dup': 1}, {'word': 'get_keys(', 'kind': 'f', 'abbr': 'get_keys(Val) -> [Key]', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info/1', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info/2', 'dup': 1}, {'word': 'get_stacktrace(', 'kind': 'f', 'abbr': 'get_stacktrace() -> [{Module, Function, Arity | Args}]', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader() -> GroupLeader', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader(GroupLeader, Pid) -> true', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt/0', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt/1', 'dup': 1}, {'word': 'hash(', 'kind': 'f', 'abbr': 'hash(Term, Range) -> Hash', 'dup': 1}, {'word': 'hd(', 'kind': 'f', 'abbr': 'hd(List) -> term()', 'dup': 1}, {'word': 'hibernate(', 'kind': 'f', 'abbr': 'hibernate/3', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list(Integer) -> string()', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list(Integer, Base) -> string()', 'dup': 1}, {'word': 'iolist_size(', 'kind': 'f', 'abbr': 'iolist_size(Item) -> integer() >= 0', 'dup': 1}, {'word': 'iolist_to_binary(', 'kind': 'f', 'abbr': 'iolist_to_binary(IoListOrBinary) -> binary()', 'dup': 1}, {'word': 'is_alive(', 'kind': 'f', 'abbr': 'is_alive() -> boolean()', 'dup': 1}, {'word': 'is_atom(', 'kind': 'f', 'abbr': 'is_atom(Term) -> boolean()', 'dup': 1}, {'word': 'is_binary(', 'kind': 'f', 'abbr': 'is_binary(Term) -> boolean()', 'dup': 1}, {'word': 'is_bitstring(', 'kind': 'f', 'abbr': 'is_bitstring(Term) -> boolean()', 'dup': 1}, {'word': 'is_boolean(', 'kind': 'f', 'abbr': 'is_boolean(Term) -> boolean()', 'dup': 1}, {'word': 'is_builtin(', 'kind': 'f', 'abbr': 'is_builtin(Module, Function, Arity) -> boolean()', 'dup': 1}, {'word': 'is_float(', 'kind': 'f', 'abbr': 'is_float(Term) -> boolean()', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function(Term) -> boolean()', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function(Term, Arity) -> boolean()', 'dup': 1}, {'word': 'is_integer(', 'kind': 'f', 'abbr': 'is_integer(Term) -> boolean()', 'dup': 1}, {'word': 'is_list(', 'kind': 'f', 'abbr': 'is_list(Term) -> boolean()', 'dup': 1}, {'word': 'is_number(', 'kind': 'f', 'abbr': 'is_number(Term) -> boolean()', 'dup': 1}, {'word': 'is_pid(', 'kind': 'f', 'abbr': 'is_pid(Term) -> boolean()', 'dup': 1}, {'word': 'is_port(', 'kind': 'f', 'abbr': 'is_port(Term) -> boolean()', 'dup': 1}, {'word': 'is_process_alive(', 'kind': 'f', 'abbr': 'is_process_alive(Pid) -> boolean()', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record(Term, RecordTag) -> boolean()', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record(Term, RecordTag, Size) -> boolean()', 'dup': 1}, {'word': 'is_reference(', 'kind': 'f', 'abbr': 'is_reference(Term) -> boolean()', 'dup': 1}, {'word': 'is_tuple(', 'kind': 'f', 'abbr': 'is_tuple(Term) -> boolean()', 'dup': 1}, {'word': 'length(', 'kind': 'f', 'abbr': 'length(List) -> integer() >= 0', 'dup': 1}, {'word': 'link(', 'kind': 'f', 'abbr': 'link(Pid) -> true', 'dup': 1}, {'word': 'list_to_atom(', 'kind': 'f', 'abbr': 'list_to_atom(String) -> atom()', 'dup': 1}, {'word': 'list_to_binary(', 'kind': 'f', 'abbr': 'list_to_binary(IoList) -> binary()', 'dup': 1}, {'word': 'list_to_bitstring(', 'kind': 'f', 'abbr': 'list_to_bitstring(BitstringList) -> bitstring()', 'dup': 1}, {'word': 'list_to_existing_atom(', 'kind': 'f', 'abbr': 'list_to_existing_atom(String) -> atom()', 'dup': 1}, {'word': 'list_to_float(', 'kind': 'f', 'abbr': 'list_to_float(String) -> float()', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer(String) -> integer()', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer(String, Base) -> integer()', 'dup': 1}, {'word': 'list_to_pid(', 'kind': 'f', 'abbr': 'list_to_pid(String) -> pid()', 'dup': 1}, {'word': 'list_to_tuple(', 'kind': 'f', 'abbr': 'list_to_tuple(List) -> tuple()', 'dup': 1}, {'word': 'load_module(', 'kind': 'f', 'abbr': 'load_module(Module, Binary) -> {module, Module} | {error, Reason}', 'dup': 1}, {'word': 'load_nif(', 'kind': 'f', 'abbr': 'load_nif(Path, LoadInfo) -> ok | {error, {Reason, Text}}', 'dup': 1}, {'word': 'loaded(', 'kind': 'f', 'abbr': 'loaded() -> [Module]', 'dup': 1}, {'word': 'localtime(', 'kind': 'f', 'abbr': 'localtime() -> DateTime', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime/1', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime/2', 'dup': 1}, {'word': 'make_fun(', 'kind': 'f', 'abbr': 'make_fun/3', 'dup': 1}, {'word': 'make_ref(', 'kind': 'f', 'abbr': 'make_ref() -> reference()', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple(Arity, InitialValue) -> tuple()', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple(Arity, Default, InitList) -> tuple()', 'dup': 1}, {'word': 'match_spec_test(', 'kind': 'f', 'abbr': 'match_spec_test/3', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(Term1, Term2) -> Maximum', 'dup': 1}, {'word': 'md5(', 'kind': 'f', 'abbr': 'md5(Data) -> Digest', 'dup': 1}, {'word': 'md5_final(', 'kind': 'f', 'abbr': 'md5_final(Context) -> Digest', 'dup': 1}, {'word': 'md5_init(', 'kind': 'f', 'abbr': 'md5_init() -> Context', 'dup': 1}, {'word': 'md5_update(', 'kind': 'f', 'abbr': 'md5_update(Context, Data) -> NewContext', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory() -> [{Type, Size}]@memory(Type | [Type]) -> Size | [{Type, Size}]', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory() -> [{Type, Size}]@memory(Type | [Type]) -> Size | [{Type, Size}]', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(Term1, Term2) -> Minimum', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'module_loaded(', 'kind': 'f', 'abbr': 'module_loaded(Module) -> boolean()', 'dup': 1}, {'word': 'monitor(', 'kind': 'f', 'abbr': 'monitor(Type, Item) -> MonitorRef', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node(Node, Flag) -> true', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node(Node, Flag, Options) -> true', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error/1', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error/2', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node() -> Node@node(Arg) -> Node', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node() -> Node@node(Arg) -> Node', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes() -> Nodes@nodes(Arg | [Arg]) -> Nodes', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes() -> Nodes@nodes(Arg | [Arg]) -> Nodes', 'dup': 1}, {'word': 'not(', 'kind': 'f', 'abbr': 'not/1', 'dup': 1}, {'word': 'now(', 'kind': 'f', 'abbr': 'now() -> timestamp()', 'dup': 1}, {'word': 'open_port(', 'kind': 'f', 'abbr': 'open_port(PortName, PortSettings) -> port()', 'dup': 1}, {'word': 'or(', 'kind': 'f', 'abbr': 'or/2', 'dup': 1}, {'word': 'phash(', 'kind': 'f', 'abbr': 'phash(Term, Range) -> Hash', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2/1', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2/2', 'dup': 1}, {'word': 'pid_to_list(', 'kind': 'f', 'abbr': 'pid_to_list(Pid) -> string()', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call/2', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call(Port, Operation, Data) -> term()', 'dup': 1}, {'word': 'port_close(', 'kind': 'f', 'abbr': 'port_close(Port) -> true', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command(Port, Data) -> true', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command(Port, Data, OptionList) -> boolean()', 'dup': 1}, {'word': 'port_connect(', 'kind': 'f', 'abbr': 'port_connect(Port, Pid) -> true', 'dup': 1}, {'word': 'port_control(', 'kind': 'f', 'abbr': 'port_control(Port, Operation, Data) -> Res', 'dup': 1}, {'word': 'port_get_data(', 'kind': 'f', 'abbr': 'port_get_data/1', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info(Port) -> [{Item, Info}] | undefined', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info(Port, Item) -> {Item, Info} | undefined | []', 'dup': 1}, {'word': 'port_set_data(', 'kind': 'f', 'abbr': 'port_set_data/2', 'dup': 1}, {'word': 'port_to_list(', 'kind': 'f', 'abbr': 'port_to_list(Port) -> string()', 'dup': 1}, {'word': 'ports(', 'kind': 'f', 'abbr': 'ports() -> [port()]', 'dup': 1}, {'word': 'pre_loaded(', 'kind': 'f', 'abbr': 'pre_loaded() -> [Module]', 'dup': 1}, {'word': 'process_display(', 'kind': 'f', 'abbr': 'process_display(Pid, Type) -> void()', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag(Flag, Value) -> OldValue', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag(Pid, Flag, Value) -> OldValue', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info(Pid) -> InfoResult', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info(Pid, ItemSpec) -> InfoResult', 'dup': 1}, {'word': 'processes(', 'kind': 'f', 'abbr': 'processes() -> [pid()]', 'dup': 1}, {'word': 'purge_module(', 'kind': 'f', 'abbr': 'purge_module(Module) -> void()', 'dup': 1}, {'word': 'put(', 'kind': 'f', 'abbr': 'put(Key, Val) -> OldVal | undefined', 'dup': 1}, {'word': 'raise(', 'kind': 'f', 'abbr': 'raise/3', 'dup': 1}, {'word': 'read_timer(', 'kind': 'f', 'abbr': 'read_timer(TimerRef) -> integer() >= 0 | false', 'dup': 1}, {'word': 'ref_to_list(', 'kind': 'f', 'abbr': 'ref_to_list(Ref) -> string()', 'dup': 1}, {'word': 'register(', 'kind': 'f', 'abbr': 'register(RegName, Pid | Port) -> true', 'dup': 1}, {'word': 'registered(', 'kind': 'f', 'abbr': 'registered() -> [RegName]', 'dup': 1}, {'word': 'rem(', 'kind': 'f', 'abbr': 'rem/2', 'dup': 1}, {'word': 'resume_process(', 'kind': 'f', 'abbr': 'resume_process(Suspendee) -> true', 'dup': 1}, {'word': 'round(', 'kind': 'f', 'abbr': 'round(Number) -> integer()', 'dup': 1}, {'word': 'self(', 'kind': 'f', 'abbr': 'self() -> pid()', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send(Dest, Msg) -> Msg', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send(Dest, Msg, [Option]) -> Res', 'dup': 1}, {'word': 'send_after(', 'kind': 'f', 'abbr': 'send_after(Time, Dest, Msg) -> TimerRef', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg) -> boolean()', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg, Options) -> boolean()', 'dup': 1}, {'word': 'seq_trace(', 'kind': 'f', 'abbr': 'seq_trace/2', 'dup': 1}, {'word': 'seq_trace_info(', 'kind': 'f', 'abbr': 'seq_trace_info/1', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print/1', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print/2', 'dup': 1}, {'word': 'set_cookie(', 'kind': 'f', 'abbr': 'set_cookie(Node, Cookie) -> true', 'dup': 1}, {'word': 'set_cpu_topology(', 'kind': 'f', 'abbr': 'set_cpu_topology/1', 'dup': 1}, {'word': 'setelement(', 'kind': 'f', 'abbr': 'setelement(Index, Tuple1, Value) -> Tuple2', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode/2', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode/3', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size(Item) -> integer() >= 0', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Fun) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Module, Function, Args) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt/1', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Node, Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt/4', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt/5', 'dup': 1}, {'word': 'split_binary(', 'kind': 'f', 'abbr': 'split_binary(Bin, Pos) -> {Bin1, Bin2}', 'dup': 1}, {'word': 'start_timer(', 'kind': 'f', 'abbr': 'start_timer(Time, Dest, Msg) -> TimerRef', 'dup': 1}, {'word': 'statistics(', 'kind': 'f', 'abbr': 'statistics(Type) -> Res', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract/2', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process(Suspendee) -> true', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process(Suspendee, OptList) -> boolean()', 'dup': 1}, {'word': 'system_flag(', 'kind': 'f', 'abbr': 'system_flag(Flag, Value) -> OldValue', 'dup': 1}, {'word': 'system_info(', 'kind': 'f', 'abbr': 'system_info(Type) -> Res', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor() -> MonSettings', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor() -> MonSettings', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor(MonitorPid, [Option]) -> MonSettings', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile() -> ProfilerSettings', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile(ProfilerPid, Options) -> ProfilerSettings', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary(Term) -> ext_binary()', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary(Term, [Option]) -> ext_binary()', 'dup': 1}, {'word': 'throw(', 'kind': 'f', 'abbr': 'throw/1', 'dup': 1}, {'word': 'time(', 'kind': 'f', 'abbr': 'time() -> {Hour, Minute, Second}', 'dup': 1}, {'word': 'tl(', 'kind': 'f', 'abbr': 'tl(List1) -> List2', 'dup': 1}, {'word': 'trace(', 'kind': 'f', 'abbr': 'trace(PidSpec, How, FlagList) -> integer() >= 0', 'dup': 1}, {'word': 'trace_delivered(', 'kind': 'f', 'abbr': 'trace_delivered(Tracee) -> Ref', 'dup': 1}, {'word': 'trace_info(', 'kind': 'f', 'abbr': 'trace_info(PidOrFunc, Item) -> Res', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern(MFA, MatchSpec) -> integer() >= 0', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern(MFA, MatchSpec, FlagList) -> integer() >= 0', 'dup': 1}, {'word': 'trunc(', 'kind': 'f', 'abbr': 'trunc(Number) -> integer()', 'dup': 1}, {'word': 'tuple_size(', 'kind': 'f', 'abbr': 'tuple_size(Tuple) -> integer() >= 0', 'dup': 1}, {'word': 'tuple_to_list(', 'kind': 'f', 'abbr': 'tuple_to_list(Tuple) -> [term()]', 'dup': 1}, {'word': 'universaltime(', 'kind': 'f', 'abbr': 'universaltime() -> DateTime', 'dup': 1}, {'word': 'universaltime_to_localtime(', 'kind': 'f', 'abbr': 'universaltime_to_localtime/1', 'dup': 1}, {'word': 'unlink(', 'kind': 'f', 'abbr': 'unlink(Id) -> true', 'dup': 1}, {'word': 'unregister(', 'kind': 'f', 'abbr': 'unregister(RegName) -> true', 'dup': 1}, {'word': 'whereis(', 'kind': 'f', 'abbr': 'whereis(RegName) -> pid() | port() | undefined', 'dup': 1}, {'word': 'xor(', 'kind': 'f', 'abbr': 'xor/2', 'dup': 1}, {'word': 'yield(', 'kind': 'f', 'abbr': 'yield() -> true', 'dup': 1}]}
{'file': [{'word': 'advise(', 'kind': 'f', 'abbr': 'advise(IoDevice, Offset, Length, Advise) -> ok | {error, Reason}', 'dup': 1}, {'word': 'altname(', 'kind': 'f', 'abbr': 'altname/1', 'dup': 1}, {'word': 'change_group(', 'kind': 'f', 'abbr': 'change_group(Filename, Gid) -> ok | {error, Reason}', 'dup': 1}, {'word': 'change_mode(', 'kind': 'f', 'abbr': 'change_mode(Filename, Mode) -> ok | {error, Reason}', 'dup': 1}, {'word': 'change_owner(', 'kind': 'f', 'abbr': 'change_owner(Filename, Uid) -> ok | {error, Reason}', 'dup': 1}, {'word': 'change_owner(', 'kind': 'f', 'abbr': 'change_owner(Filename, Uid, Gid) -> ok | {error, Reason}', 'dup': 1}, {'word': 'change_time(', 'kind': 'f', 'abbr': 'change_time(Filename, Mtime) -> ok | {error, Reason}', 'dup': 1}, {'word': 'change_time(', 'kind': 'f', 'abbr': 'change_time(Filename, Atime, Mtime) -> ok | {error, Reason}', 'dup': 1}, {'word': 'close(', 'kind': 'f', 'abbr': 'close(IoDevice) -> ok | {error, Reason}', 'dup': 1}, {'word': 'consult(', 'kind': 'f', 'abbr': 'consult(Filename) -> {ok, Terms} | {error, Reason}', 'dup': 1}, {'word': 'copy(', 'kind': 'f', 'abbr': 'copy(Source, Destination) -> {ok, BytesCopied} | {error, Reason}', 'dup': 1}, {'word': 'copy(', 'kind': 'f', 'abbr': 'copy/3', 'dup': 1}, {'word': 'copy_opened(', 'kind': 'f', 'abbr': 'copy_opened/3', 'dup': 1}, {'word': 'datasync(', 'kind': 'f', 'abbr': 'datasync(IoDevice) -> ok | {error, Reason}', 'dup': 1}, {'word': 'del_dir(', 'kind': 'f', 'abbr': 'del_dir(Dir) -> ok | {error, Reason}', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Filename) -> ok | {error, Reason}', 'dup': 1}, {'word': 'eval(', 'kind': 'f', 'abbr': 'eval(Filename) -> ok | {error, Reason}', 'dup': 1}, {'word': 'eval(', 'kind': 'f', 'abbr': 'eval(Filename, Bindings) -> ok | {error, Reason}', 'dup': 1}, {'word': 'format_error(', 'kind': 'f', 'abbr': 'format_error(Reason) -> Chars', 'dup': 1}, {'word': 'get_cwd(', 'kind': 'f', 'abbr': 'get_cwd() -> {ok, Dir} | {error, Reason}@get_cwd(Drive) -> {ok, Dir} | {error, Reason}', 'dup': 1}, {'word': 'get_cwd(', 'kind': 'f', 'abbr': 'get_cwd() -> {ok, Dir} | {error, Reason}@get_cwd(Drive) -> {ok, Dir} | {error, Reason}', 'dup': 1}, {'word': 'ipread_s32bu_p32bu(', 'kind': 'f', 'abbr': 'ipread_s32bu_p32bu/3', 'dup': 1}, {'word': 'ipread_s32bu_p32bu_int(', 'kind': 'f', 'abbr': 'ipread_s32bu_p32bu_int/3', 'dup': 1}, {'word': 'list_dir(', 'kind': 'f', 'abbr': 'list_dir(Dir) -> {ok, Filenames} | {error, Reason}', 'dup': 1}, {'word': 'make_dir(', 'kind': 'f', 'abbr': 'make_dir(Dir) -> ok | {error, Reason}', 'dup': 1}, {'word': 'make_link(', 'kind': 'f', 'abbr': 'make_link(Existing, New) -> ok | {error, Reason}', 'dup': 1}, {'word': 'make_symlink(', 'kind': 'f', 'abbr': 'make_symlink(Name1, Name2) -> ok | {error, Reason}', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'native_name_encoding(', 'kind': 'f', 'abbr': 'native_name_encoding() -> latin1 | utf8', 'dup': 1}, {'word': 'open(', 'kind': 'f', 'abbr': 'open(Filename, Modes) -> {ok, IoDevice} | {error, Reason}', 'dup': 1}, {'word': 'path_consult(', 'kind': 'f', 'abbr': 'path_consult/2', 'dup': 1}, {'word': 'path_eval(', 'kind': 'f', 'abbr': 'path_eval(Path, Filename) -> {ok, FullName} | {error, Reason}', 'dup': 1}, {'word': 'path_eval(', 'kind': 'f', 'abbr': 'path_eval/3', 'dup': 1}, {'word': 'path_open(', 'kind': 'f', 'abbr': 'path_open/3', 'dup': 1}, {'word': 'path_script(', 'kind': 'f', 'abbr': 'path_script/2', 'dup': 1}, {'word': 'path_script(', 'kind': 'f', 'abbr': 'path_script/3', 'dup': 1}, {'word': 'pid2name(', 'kind': 'f', 'abbr': 'pid2name(Pid) -> {ok, Filename} | undefined', 'dup': 1}, {'word': 'position(', 'kind': 'f', 'abbr': 'position/2', 'dup': 1}, {'word': 'pread(', 'kind': 'f', 'abbr': 'pread(IoDevice, LocNums) -> {ok, DataL} | eof | {error, Reason}', 'dup': 1}, {'word': 'pread(', 'kind': 'f', 'abbr': 'pread/3', 'dup': 1}, {'word': 'pwrite(', 'kind': 'f', 'abbr': 'pwrite(IoDevice, LocBytes) -> ok | {error, {N, Reason}}', 'dup': 1}, {'word': 'pwrite(', 'kind': 'f', 'abbr': 'pwrite(IoDevice, Location, Bytes) -> ok | {error, Reason}', 'dup': 1}, {'word': 'raw_read_file_info(', 'kind': 'f', 'abbr': 'raw_read_file_info/1', 'dup': 1}, {'word': 'raw_write_file_info(', 'kind': 'f', 'abbr': 'raw_write_file_info/2', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read(IoDevice, Number) -> {ok, Data} | eof | {error, Reason}', 'dup': 1}, {'word': 'read_file(', 'kind': 'f', 'abbr': 'read_file(Filename) -> {ok, Binary} | {error, Reason}', 'dup': 1}, {'word': 'read_file_info(', 'kind': 'f', 'abbr': 'read_file_info(Filename) -> {ok, FileInfo} | {error, Reason}', 'dup': 1}, {'word': 'read_line(', 'kind': 'f', 'abbr': 'read_line(IoDevice) -> {ok, Data} | eof | {error, Reason}', 'dup': 1}, {'word': 'read_link(', 'kind': 'f', 'abbr': 'read_link(Name) -> {ok, Filename} | {error, Reason}', 'dup': 1}, {'word': 'read_link_info(', 'kind': 'f', 'abbr': 'read_link_info(Name) -> {ok, FileInfo} | {error, Reason}', 'dup': 1}, {'word': 'rename(', 'kind': 'f', 'abbr': 'rename(Source, Destination) -> ok | {error, Reason}', 'dup': 1}, {'word': 'script(', 'kind': 'f', 'abbr': 'script(Filename) -> {ok, Value} | {error, Reason}', 'dup': 1}, {'word': 'script(', 'kind': 'f', 'abbr': 'script(Filename, Bindings) -> {ok, Value} | {error, Reason}', 'dup': 1}, {'word': 'set_cwd(', 'kind': 'f', 'abbr': 'set_cwd(Dir) -> ok | {error, Reason}', 'dup': 1}, {'word': 'sync(', 'kind': 'f', 'abbr': 'sync(IoDevice) -> ok | {error, Reason}', 'dup': 1}, {'word': 'truncate(', 'kind': 'f', 'abbr': 'truncate(IoDevice) -> ok | {error, Reason}', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write(IoDevice, Bytes) -> ok | {error, Reason}', 'dup': 1}, {'word': 'write_file(', 'kind': 'f', 'abbr': 'write_file(Filename, Bytes) -> ok | {error, Reason}', 'dup': 1}, {'word': 'write_file(', 'kind': 'f', 'abbr': 'write_file(Filename, Bytes, Modes) -> ok | {error, Reason}', 'dup': 1}, {'word': 'write_file_info(', 'kind': 'f', 'abbr': 'write_file_info(Filename, FileInfo) -> ok | {error, Reason}', 'dup': 1}]}
{'io': [{'word': 'columns(', 'kind': 'f', 'abbr': 'columns() -> {ok, integer() >= 1} | {error, enotsup}@columns(IoDevice) -> {ok, integer() >= 1} | {error, enotsup}', 'dup': 1}, {'word': 'columns(', 'kind': 'f', 'abbr': 'columns() -> {ok, integer() >= 1} | {error, enotsup}@columns(IoDevice) -> {ok, integer() >= 1} | {error, enotsup}', 'dup': 1}, {'word': 'format(', 'kind': 'f', 'abbr': 'format(Format) -> ok', 'dup': 1}, {'word': 'format(', 'kind': 'f', 'abbr': 'format(Format, Data) -> ok', 'dup': 1}, {'word': 'format(', 'kind': 'f', 'abbr': 'format(IoDevice, Format, Data) -> ok', 'dup': 1}, {'word': 'fread(', 'kind': 'f', 'abbr': 'fread(Prompt, Format) -> Result', 'dup': 1}, {'word': 'fread(', 'kind': 'f', 'abbr': 'fread(IoDevice, Prompt, Format) -> Result', 'dup': 1}, {'word': 'fwrite(', 'kind': 'f', 'abbr': 'fwrite(Format) -> ok', 'dup': 1}, {'word': 'fwrite(', 'kind': 'f', 'abbr': 'fwrite(Format, Data) -> ok', 'dup': 1}, {'word': 'fwrite(', 'kind': 'f', 'abbr': 'fwrite(IoDevice, Format, Data) -> ok', 'dup': 1}, {'word': 'get_chars(', 'kind': 'f', 'abbr': 'get_chars(Prompt, Count) -> Data | eof', 'dup': 1}, {'word': 'get_chars(', 'kind': 'f', 'abbr': 'get_chars(IoDevice, Prompt, Count) -> Data | eof | {error, Reason}', 'dup': 1}, {'word': 'get_line(', 'kind': 'f', 'abbr': 'get_line(Prompt) -> Data | eof | {error, Reason}', 'dup': 1}, {'word': 'get_line(', 'kind': 'f', 'abbr': 'get_line(IoDevice, Prompt) -> Data | eof | {error, term()}', 'dup': 1}, {'word': 'get_password(', 'kind': 'f', 'abbr': 'get_password/0', 'dup': 1}, {'word': 'get_password(', 'kind': 'f', 'abbr': 'get_password/1', 'dup': 1}, {'word': 'getopts(', 'kind': 'f', 'abbr': 'getopts() -> [\fBopt_pair()\fR\&]@getopts(IoDevice) -> [\fBopt_pair()\fR\&]', 'dup': 1}, {'word': 'getopts(', 'kind': 'f', 'abbr': 'getopts() -> [\fBopt_pair()\fR\&]@getopts(IoDevice) -> [\fBopt_pair()\fR\&]', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nl(', 'kind': 'f', 'abbr': 'nl() -> ok@nl(IoDevice) -> ok', 'dup': 1}, {'word': 'nl(', 'kind': 'f', 'abbr': 'nl() -> ok@nl(IoDevice) -> ok', 'dup': 1}, {'word': 'parse_erl_exprs(', 'kind': 'f', 'abbr': 'parse_erl_exprs(Prompt) -> Result', 'dup': 1}, {'word': 'parse_erl_exprs(', 'kind': 'f', 'abbr': 'parse_erl_exprs(IoDevice, Prompt) -> Result', 'dup': 1}, {'word': 'parse_erl_exprs(', 'kind': 'f', 'abbr': 'parse_erl_exprs(IoDevice, Prompt, StartLine) -> Result', 'dup': 1}, {'word': 'parse_erl_form(', 'kind': 'f', 'abbr': 'parse_erl_form(Prompt) -> Result', 'dup': 1}, {'word': 'parse_erl_form(', 'kind': 'f', 'abbr': 'parse_erl_form(IoDevice, Prompt) -> Result', 'dup': 1}, {'word': 'parse_erl_form(', 'kind': 'f', 'abbr': 'parse_erl_form(IoDevice, Prompt, StartLine) -> Result', 'dup': 1}, {'word': 'put_chars(', 'kind': 'f', 'abbr': 'put_chars(CharData) -> ok', 'dup': 1}, {'word': 'put_chars(', 'kind': 'f', 'abbr': 'put_chars(IoDevice, IoData) -> ok', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read(Prompt) -> Result', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read(IoDevice, Prompt) -> Result', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read(IoDevice, Prompt, StartLine) -> Result', 'dup': 1}, {'word': 'request(', 'kind': 'f', 'abbr': 'request/1', 'dup': 1}, {'word': 'request(', 'kind': 'f', 'abbr': 'request/2', 'dup': 1}, {'word': 'requests(', 'kind': 'f', 'abbr': 'requests/1', 'dup': 1}, {'word': 'requests(', 'kind': 'f', 'abbr': 'requests/2', 'dup': 1}, {'word': 'rows(', 'kind': 'f', 'abbr': 'rows() -> {ok, integer() >= 1} | {error, enotsup}@rows(IoDevice) -> {ok, integer() >= 1} | {error, enotsup}', 'dup': 1}, {'word': 'rows(', 'kind': 'f', 'abbr': 'rows() -> {ok, integer() >= 1} | {error, enotsup}@rows(IoDevice) -> {ok, integer() >= 1} | {error, enotsup}', 'dup': 1}, {'word': 'scan_erl_exprs(', 'kind': 'f', 'abbr': 'scan_erl_exprs(Prompt) -> Result', 'dup': 1}, {'word': 'scan_erl_exprs(', 'kind': 'f', 'abbr': 'scan_erl_exprs(Device, Prompt) -> Result', 'dup': 1}, {'word': 'scan_erl_exprs(', 'kind': 'f', 'abbr': 'scan_erl_exprs(Device, Prompt, StartLine) -> Result', 'dup': 1}, {'word': 'scan_erl_form(', 'kind': 'f', 'abbr': 'scan_erl_form(Prompt) -> Result', 'dup': 1}, {'word': 'scan_erl_form(', 'kind': 'f', 'abbr': 'scan_erl_form(IoDevice, Prompt) -> Result', 'dup': 1}, {'word': 'scan_erl_form(', 'kind': 'f', 'abbr': 'scan_erl_form(IoDevice, Prompt, StartLine) -> Result', 'dup': 1}, {'word': 'setopts(', 'kind': 'f', 'abbr': 'setopts(Opts) -> ok | {error, Reason}', 'dup': 1}, {'word': 'setopts(', 'kind': 'f', 'abbr': 'setopts(IoDevice, Opts) -> ok | {error, Reason}', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write(Term) -> ok', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write(IoDevice, Term) -> ok', 'dup': 1}]}
{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> integer() >= 0', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind(Key, N, TupleList) -> Tuple | false', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember(Key, N, TupleList) -> boolean()', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch(Key, N, TupleList) -> {value, Tuple} | false', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member(Elem, List) -> boolean()', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1, Tail) -> List2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge/3', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge/2', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge/3', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3/3', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge/3', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge/2', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge/3', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3/3', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf/2', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'math': [{'word': 'acos(', 'kind': 'f', 'abbr': 'acos/1', 'dup': 1}, {'word': 'acosh(', 'kind': 'f', 'abbr': 'acosh/1', 'dup': 1}, {'word': 'asin(', 'kind': 'f', 'abbr': 'asin/1', 'dup': 1}, {'word': 'asinh(', 'kind': 'f', 'abbr': 'asinh/1', 'dup': 1}, {'word': 'atan(', 'kind': 'f', 'abbr': 'atan/1', 'dup': 1}, {'word': 'atan2(', 'kind': 'f', 'abbr': 'atan2/2', 'dup': 1}, {'word': 'atanh(', 'kind': 'f', 'abbr': 'atanh/1', 'dup': 1}, {'word': 'cos(', 'kind': 'f', 'abbr': 'cos/1', 'dup': 1}, {'word': 'cosh(', 'kind': 'f', 'abbr': 'cosh/1', 'dup': 1}, {'word': 'erf(', 'kind': 'f', 'abbr': 'erf(X) -> float()', 'dup': 1}, {'word': 'erfc(', 'kind': 'f', 'abbr': 'erfc(X) -> float()', 'dup': 1}, {'word': 'exp(', 'kind': 'f', 'abbr': 'exp/1', 'dup': 1}, {'word': 'log(', 'kind': 'f', 'abbr': 'log/1', 'dup': 1}, {'word': 'log10(', 'kind': 'f', 'abbr': 'log10/1', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'pi(', 'kind': 'f', 'abbr': 'pi() -> float()', 'dup': 1}, {'word': 'pow(', 'kind': 'f', 'abbr': 'pow/2', 'dup': 1}, {'word': 'sin(', 'kind': 'f', 'abbr': 'sin/1', 'dup': 1}, {'word': 'sinh(', 'kind': 'f', 'abbr': 'sinh/1', 'dup': 1}, {'word': 'sqrt(', 'kind': 'f', 'abbr': 'sqrt/1', 'dup': 1}, {'word': 'tan(', 'kind': 'f', 'abbr': 'tan/1', 'dup': 1}, {'word': 'tanh(', 'kind': 'f', 'abbr': 'tanh/1', 'dup': 1}]}
{'queue': [{'word': 'cons(', 'kind': 'f', 'abbr': 'cons/2', 'dup': 1}, {'word': 'daeh(', 'kind': 'f', 'abbr': 'daeh/1', 'dup': 1}, {'word': 'drop(', 'kind': 'f', 'abbr': 'drop/1', 'dup': 1}, {'word': 'drop_r(', 'kind': 'f', 'abbr': 'drop_r/1', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter/2', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list/1', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get/1', 'dup': 1}, {'word': 'get_r(', 'kind': 'f', 'abbr': 'get_r/1', 'dup': 1}, {'word': 'head(', 'kind': 'f', 'abbr': 'head/1', 'dup': 1}, {'word': 'in(', 'kind': 'f', 'abbr': 'in/2', 'dup': 1}, {'word': 'in_r(', 'kind': 'f', 'abbr': 'in_r/2', 'dup': 1}, {'word': 'init(', 'kind': 'f', 'abbr': 'init/1', 'dup': 1}, {'word': 'is_empty(', 'kind': 'f', 'abbr': 'is_empty/1', 'dup': 1}, {'word': 'is_queue(', 'kind': 'f', 'abbr': 'is_queue/1', 'dup': 1}, {'word': 'join(', 'kind': 'f', 'abbr': 'join/2', 'dup': 1}, {'word': 'lait(', 'kind': 'f', 'abbr': 'lait/1', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last/1', 'dup': 1}, {'word': 'len(', 'kind': 'f', 'abbr': 'len/1', 'dup': 1}, {'word': 'liat(', 'kind': 'f', 'abbr': 'liat/1', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> queue()', 'dup': 1}, {'word': 'out(', 'kind': 'f', 'abbr': 'out/1', 'dup': 1}, {'word': 'out_r(', 'kind': 'f', 'abbr': 'out_r/1', 'dup': 1}, {'word': 'peek(', 'kind': 'f', 'abbr': 'peek/1', 'dup': 1}, {'word': 'peek_r(', 'kind': 'f', 'abbr': 'peek_r/1', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/1', 'dup': 1}, {'word': 'snoc(', 'kind': 'f', 'abbr': 'snoc/2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split/2', 'dup': 1}, {'word': 'tail(', 'kind': 'f', 'abbr': 'tail/1', 'dup': 1}, {'word': 'to_list(', 'kind': 'f', 'abbr': 'to_list/1', 'dup': 1}]}
{'random': [{'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'seed(', 'kind': 'f', 'abbr': 'seed() -> \fBran()\fR\&', 'dup': 1}, {'word': 'seed(', 'kind': 'f', 'abbr': 'seed() -> \fBran()\fR\&', 'dup': 1}, {'word': 'seed(', 'kind': 'f', 'abbr': 'seed(A1, A2, A3) -> undefined | \fBran()\fR\&', 'dup': 1}, {'word': 'seed0(', 'kind': 'f', 'abbr': 'seed0() -> \fBran()\fR\&', 'dup': 1}, {'word': 'uniform(', 'kind': 'f', 'abbr': 'uniform() -> float()@uniform(N) -> integer() >= 1', 'dup': 1}, {'word': 'uniform(', 'kind': 'f', 'abbr': 'uniform() -> float()@uniform(N) -> integer() >= 1', 'dup': 1}, {'word': 'uniform_s(', 'kind': 'f', 'abbr': 'uniform_s(State0) -> {float(), State1}', 'dup': 1}, {'word': 'uniform_s(', 'kind': 'f', 'abbr': 'uniform_s(N, State0) -> {integer(), State1}', 'dup': 1}]}
{'string': [{'word': 'centre(', 'kind': 'f', 'abbr': 'centre(String, Number) -> Centered', 'dup': 1}, {'word': 'centre(', 'kind': 'f', 'abbr': 'centre(String, Number, Character) -> Centered', 'dup': 1}, {'word': 'chars(', 'kind': 'f', 'abbr': 'chars(Character, Number) -> String', 'dup': 1}, {'word': 'chars(', 'kind': 'f', 'abbr': 'chars(Character, Number, Tail) -> String', 'dup': 1}, {'word': 'chr(', 'kind': 'f', 'abbr': 'chr(String, Character) -> Index', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(String1, String2) -> String3', 'dup': 1}, {'word': 'copies(', 'kind': 'f', 'abbr': 'copies(String, Number) -> Copies', 'dup': 1}, {'word': 'cspan(', 'kind': 'f', 'abbr': 'cspan(String, Chars) -> Length', 'dup': 1}, {'word': 'equal(', 'kind': 'f', 'abbr': 'equal(String1, String2) -> boolean()', 'dup': 1}, {'word': 'join(', 'kind': 'f', 'abbr': 'join(StringList, Separator) -> String', 'dup': 1}, {'word': 'left(', 'kind': 'f', 'abbr': 'left(String, Number) -> Left', 'dup': 1}, {'word': 'left(', 'kind': 'f', 'abbr': 'left(String, Number, Character) -> Left', 'dup': 1}, {'word': 'len(', 'kind': 'f', 'abbr': 'len(String) -> Length', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'rchr(', 'kind': 'f', 'abbr': 'rchr(String, Character) -> Index', 'dup': 1}, {'word': 'right(', 'kind': 'f', 'abbr': 'right(String, Number) -> Right', 'dup': 1}, {'word': 'right(', 'kind': 'f', 'abbr': 'right(String, Number, Character) -> Right', 'dup': 1}, {'word': 'rstr(', 'kind': 'f', 'abbr': 'rstr(String, SubString) -> Index', 'dup': 1}, {'word': 'span(', 'kind': 'f', 'abbr': 'span(String, Chars) -> Length', 'dup': 1}, {'word': 'str(', 'kind': 'f', 'abbr': 'str(String, SubString) -> Index', 'dup': 1}, {'word': 'strip(', 'kind': 'f', 'abbr': 'strip/1', 'dup': 1}, {'word': 'strip(', 'kind': 'f', 'abbr': 'strip(String, Direction) -> Stripped', 'dup': 1}, {'word': 'strip(', 'kind': 'f', 'abbr': 'strip(String, Direction, Character) -> Stripped', 'dup': 1}, {'word': 'sub_string(', 'kind': 'f', 'abbr': 'sub_string(String, Start) -> SubString', 'dup': 1}, {'word': 'sub_string(', 'kind': 'f', 'abbr': 'sub_string(String, Start, Stop) -> SubString', 'dup': 1}, {'word': 'sub_word(', 'kind': 'f', 'abbr': 'sub_word(String, Number) -> Word', 'dup': 1}, {'word': 'sub_word(', 'kind': 'f', 'abbr': 'sub_word(String, Number, Character) -> Word', 'dup': 1}, {'word': 'substr(', 'kind': 'f', 'abbr': 'substr(String, Start) -> SubString', 'dup': 1}, {'word': 'substr(', 'kind': 'f', 'abbr': 'substr(String, Start, Length) -> SubString', 'dup': 1}, {'word': 'to_float(', 'kind': 'f', 'abbr': 'to_float(String) -> {Float,Rest} | {error,Reason} ', 'dup': 1}, {'word': 'to_integer(', 'kind': 'f', 'abbr': 'to_integer(String) -> {Int,Rest} | {error,Reason} ', 'dup': 1}, {'word': 'to_lower(', 'kind': 'f', 'abbr': 'to_lower(String) -> Result@to_lower(Char) -> CharResult', 'dup': 1}, {'word': 'to_upper(', 'kind': 'f', 'abbr': 'to_upper(String) -> Result@to_upper(Char) -> CharResult', 'dup': 1}, {'word': 'tokens(', 'kind': 'f', 'abbr': 'tokens(String, SeparatorList) -> Tokens', 'dup': 1}, {'word': 'words(', 'kind': 'f', 'abbr': 'words(String) -> Count', 'dup': 1}, {'word': 'words(', 'kind': 'f', 'abbr': 'words(String, Character) -> Count', 'dup': 1}]}
{'timer': [{'word': 'apply_after(', 'kind': 'f', 'abbr': 'apply_after/4', 'dup': 1}, {'word': 'apply_interval(', 'kind': 'f', 'abbr': 'apply_interval/4', 'dup': 1}, {'word': 'cancel(', 'kind': 'f', 'abbr': 'cancel(TRef) -> {ok, cancel} | {error, Reason}', 'dup': 1}, {'word': 'code_change(', 'kind': 'f', 'abbr': 'code_change/3', 'dup': 1}, {'word': 'exit_after(', 'kind': 'f', 'abbr': 'exit_after(Time, Reason1) -> {ok, TRef} | {error, Reason2}', 'dup': 1}, {'word': 'exit_after(', 'kind': 'f', 'abbr': 'exit_after(Time, Pid, Reason1) -> {ok, TRef} | {error, Reason2}', 'dup': 1}, {'word': 'get_status(', 'kind': 'f', 'abbr': 'get_status/0', 'dup': 1}, {'word': 'handle_call(', 'kind': 'f', 'abbr': 'handle_call/3', 'dup': 1}, {'word': 'handle_cast(', 'kind': 'f', 'abbr': 'handle_cast/2', 'dup': 1}, {'word': 'handle_info(', 'kind': 'f', 'abbr': 'handle_info/2', 'dup': 1}, {'word': 'hms(', 'kind': 'f', 'abbr': 'hms(Hours, Minutes, Seconds) -> MilliSeconds', 'dup': 1}, {'word': 'hours(', 'kind': 'f', 'abbr': 'hours(Hours) -> MilliSeconds', 'dup': 1}, {'word': 'init(', 'kind': 'f', 'abbr': 'init/1', 'dup': 1}, {'word': 'kill_after(', 'kind': 'f', 'abbr': 'kill_after(Time) -> {ok, TRef} | {error, Reason2}', 'dup': 1}, {'word': 'kill_after(', 'kind': 'f', 'abbr': 'kill_after(Time, Pid) -> {ok, TRef} | {error, Reason2}', 'dup': 1}, {'word': 'minutes(', 'kind': 'f', 'abbr': 'minutes(Minutes) -> MilliSeconds', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'now_diff(', 'kind': 'f', 'abbr': 'now_diff(T2, T1) -> Tdiff', 'dup': 1}, {'word': 'seconds(', 'kind': 'f', 'abbr': 'seconds(Seconds) -> MilliSeconds', 'dup': 1}, {'word': 'send_after(', 'kind': 'f', 'abbr': 'send_after(Time, Message) -> {ok, TRef} | {error, Reason}', 'dup': 1}, {'word': 'send_after(', 'kind': 'f', 'abbr': 'send_after(Time, Pid, Message) -> {ok, TRef} | {error, Reason}', 'dup': 1}, {'word': 'send_interval(', 'kind': 'f', 'abbr': 'send_interval(Time, Message) -> {ok, TRef} | {error, Reason}', 'dup': 1}, {'word': 'send_interval(', 'kind': 'f', 'abbr': 'send_interval(Time, Pid, Message) -> {ok, TRef} | {error, Reason}', 'dup': 1}, {'word': 'sleep(', 'kind': 'f', 'abbr': 'sleep(Time) -> ok', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start() -> ok', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link/0', 'dup': 1}, {'word': 'tc(', 'kind': 'f', 'abbr': 'tc(Fun) -> {Time, Value}', 'dup': 1}, {'word': 'tc(', 'kind': 'f', 'abbr': 'tc(Fun, Arguments) -> {Time, Value}', 'dup': 1}, {'word': 'tc(', 'kind': 'f', 'abbr': 'tc(Module, Function, Arguments) -> {Time, Value}', 'dup': 1}, {'word': 'terminate(', 'kind': 'f', 'abbr': 'terminate/2', 'dup': 1}]}
{'inets': [{'word': 'disable_trace(', 'kind': 'f', 'abbr': 'disable_trace/0', 'dup': 1}, {'word': 'enable_trace(', 'kind': 'f', 'abbr': 'enable_trace/2', 'dup': 1}, {'word': 'enable_trace(', 'kind': 'f', 'abbr': 'enable_trace/3', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'print_version_info(', 'kind': 'f', 'abbr': 'print_version_info/0', 'dup': 1}, {'word': 'print_version_info(', 'kind': 'f', 'abbr': 'print_version_info/1', 'dup': 1}, {'word': 'report_event(', 'kind': 'f', 'abbr': 'report_event/4', 'dup': 1}, {'word': 'service_names(', 'kind': 'f', 'abbr': 'service_names() -> [Service] ', 'dup': 1}, {'word': 'services(', 'kind': 'f', 'abbr': 'services() -> [{Service, Pid}]', 'dup': 1}, {'word': 'services_info(', 'kind': 'f', 'abbr': 'services_info() -> [{Service, Pid, Info}]', 'dup': 1}, {'word': 'set_trace(', 'kind': 'f', 'abbr': 'set_trace/1', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start() -> @start(Type) -> ok | {error, Reason}', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start() -> @start(Type) -> ok | {error, Reason}', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(Service, ServiceConfig) -> {ok, Pid} | {error, Reason}', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(Service, ServiceConfig, How) -> {ok, Pid} | {error, Reason}', 'dup': 1}, {'word': 'stop(', 'kind': 'f', 'abbr': 'stop() -> ok ', 'dup': 1}, {'word': 'stop(', 'kind': 'f', 'abbr': 'stop(Service, Reference) -> ok | {error, Reason} ', 'dup': 1}, {'word': 'versions(', 'kind': 'f', 'abbr': 'versions/0', 'dup': 1}]}
{'gen_event': [{'word': 'add_handler(', 'kind': 'f', 'abbr': 'add_handler(EventMgrRef, Handler, Args) -> Result', 'dup': 1}, {'word': 'add_sup_handler(', 'kind': 'f', 'abbr': 'add_sup_handler(EventMgrRef, Handler, Args) -> Result', 'dup': 1}, {'word': 'behaviour_info(', 'kind': 'f', 'abbr': 'behaviour_info/1', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call(EventMgrRef, Handler, Request) -> Result', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call(EventMgrRef, Handler, Request, Timeout) -> Result', 'dup': 1}, {'word': 'delete_handler(', 'kind': 'f', 'abbr': 'delete_handler(EventMgrRef, Handler, Args) -> Result', 'dup': 1}, {'word': 'format_status(', 'kind': 'f', 'abbr': 'format_status/2', 'dup': 1}, {'word': 'init_it(', 'kind': 'f', 'abbr': 'init_it/6', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'notify(', 'kind': 'f', 'abbr': 'notify(EventMgrRef, Event) -> ok', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start() -> Result@start(EventMgrName) -> Result', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start() -> Result@start(EventMgrName) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link() -> Result@start_link(EventMgrName) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link() -> Result@start_link(EventMgrName) -> Result', 'dup': 1}, {'word': 'stop(', 'kind': 'f', 'abbr': 'stop(EventMgrRef) -> ok', 'dup': 1}, {'word': 'swap_handler(', 'kind': 'f', 'abbr': 'swap_handler/3', 'dup': 1}, {'word': 'swap_sup_handler(', 'kind': 'f', 'abbr': 'swap_sup_handler/3', 'dup': 1}, {'word': 'sync_notify(', 'kind': 'f', 'abbr': 'sync_notify(EventMgrRef, Event) -> ok', 'dup': 1}, {'word': 'system_code_change(', 'kind': 'f', 'abbr': 'system_code_change/4', 'dup': 1}, {'word': 'system_continue(', 'kind': 'f', 'abbr': 'system_continue/3', 'dup': 1}, {'word': 'system_terminate(', 'kind': 'f', 'abbr': 'system_terminate/4', 'dup': 1}, {'word': 'wake_hib(', 'kind': 'f', 'abbr': 'wake_hib/4', 'dup': 1}, {'word': 'which_handlers(', 'kind': 'f', 'abbr': 'which_handlers(EventMgrRef) -> [Handler]', 'dup': 1}]}
{'gen_fsm': [{'word': 'behaviour_info(', 'kind': 'f', 'abbr': 'behaviour_info/1', 'dup': 1}, {'word': 'cancel_timer(', 'kind': 'f', 'abbr': 'cancel_timer(Ref) -> RemainingTime | false', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/4', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/5', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/6', 'dup': 1}, {'word': 'format_status(', 'kind': 'f', 'abbr': 'format_status/2', 'dup': 1}, {'word': 'init_it(', 'kind': 'f', 'abbr': 'init_it/6', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'reply(', 'kind': 'f', 'abbr': 'reply(Caller, Reply) -> true', 'dup': 1}, {'word': 'send_all_state_event(', 'kind': 'f', 'abbr': 'send_all_state_event(FsmRef, Event) -> ok', 'dup': 1}, {'word': 'send_event(', 'kind': 'f', 'abbr': 'send_event(FsmRef, Event) -> ok', 'dup': 1}, {'word': 'send_event_after(', 'kind': 'f', 'abbr': 'send_event_after(Time, Event) -> Ref', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(FsmName, Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link(Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link(FsmName, Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start_timer(', 'kind': 'f', 'abbr': 'start_timer(Time, Msg) -> Ref', 'dup': 1}, {'word': 'sync_send_all_state_event(', 'kind': 'f', 'abbr': 'sync_send_all_state_event(FsmRef, Event) -> Reply', 'dup': 1}, {'word': 'sync_send_all_state_event(', 'kind': 'f', 'abbr': 'sync_send_all_state_event(FsmRef, Event, Timeout) -> Reply', 'dup': 1}, {'word': 'sync_send_event(', 'kind': 'f', 'abbr': 'sync_send_event(FsmRef, Event) -> Reply', 'dup': 1}, {'word': 'sync_send_event(', 'kind': 'f', 'abbr': 'sync_send_event(FsmRef, Event, Timeout) -> Reply', 'dup': 1}, {'word': 'system_code_change(', 'kind': 'f', 'abbr': 'system_code_change/4', 'dup': 1}, {'word': 'system_continue(', 'kind': 'f', 'abbr': 'system_continue/3', 'dup': 1}, {'word': 'system_terminate(', 'kind': 'f', 'abbr': 'system_terminate/4', 'dup': 1}, {'word': 'wake_hib(', 'kind': 'f', 'abbr': 'wake_hib/6', 'dup': 1}]}
{'gen_server': [{'word': 'abcast(', 'kind': 'f', 'abbr': 'abcast(Name, Request) -> abcast', 'dup': 1}, {'word': 'abcast(', 'kind': 'f', 'abbr': 'abcast(Nodes, Name, Request) -> abcast', 'dup': 1}, {'word': 'behaviour_info(', 'kind': 'f', 'abbr': 'behaviour_info/1', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call(ServerRef, Request) -> Reply', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call(ServerRef, Request, Timeout) -> Reply', 'dup': 1}, {'word': 'cast(', 'kind': 'f', 'abbr': 'cast(ServerRef, Request) -> ok', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/3', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/4', 'dup': 1}, {'word': 'enter_loop(', 'kind': 'f', 'abbr': 'enter_loop/5', 'dup': 1}, {'word': 'format_status(', 'kind': 'f', 'abbr': 'format_status/2', 'dup': 1}, {'word': 'init_it(', 'kind': 'f', 'abbr': 'init_it/6', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'multi_call(', 'kind': 'f', 'abbr': 'multi_call(Name, Request) -> Result', 'dup': 1}, {'word': 'multi_call(', 'kind': 'f', 'abbr': 'multi_call(Nodes, Name, Request) -> Result', 'dup': 1}, {'word': 'multi_call(', 'kind': 'f', 'abbr': 'multi_call(Nodes, Name, Request, Timeout) -> Result', 'dup': 1}, {'word': 'reply(', 'kind': 'f', 'abbr': 'reply(Client, Reply) -> Result', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start(ServerName, Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link(Module, Args, Options) -> Result', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link(ServerName, Module, Args, Options) -> Result', 'dup': 1}, {'word': 'system_code_change(', 'kind': 'f', 'abbr': 'system_code_change/4', 'dup': 1}, {'word': 'system_continue(', 'kind': 'f', 'abbr': 'system_continue/3', 'dup': 1}, {'word': 'system_terminate(', 'kind': 'f', 'abbr': 'system_terminate/4', 'dup': 1}, {'word': 'wake_hib(', 'kind': 'f', 'abbr': 'wake_hib/5', 'dup': 1}]}
{'gen_tcp': [{'word': 'accept(', 'kind': 'f', 'abbr': 'accept(ListenSocket) -> {ok, Socket} | {error, Reason}', 'dup': 1}, {'word': 'accept(', 'kind': 'f', 'abbr': 'accept(ListenSocket, Timeout) -> {ok, Socket} | {error, Reason}', 'dup': 1}, {'word': 'close(', 'kind': 'f', 'abbr': 'close(Socket) -> ok', 'dup': 1}, {'word': 'connect(', 'kind': 'f', 'abbr': 'connect(Address, Port, Options) -> {ok, Socket} | {error, Reason}', 'dup': 1}, {'word': 'connect(', 'kind': 'f', 'abbr': 'connect/4', 'dup': 1}, {'word': 'controlling_process(', 'kind': 'f', 'abbr': 'controlling_process(Socket, Pid) -> ok | {error, Reason}', 'dup': 1}, {'word': 'fdopen(', 'kind': 'f', 'abbr': 'fdopen/2', 'dup': 1}, {'word': 'listen(', 'kind': 'f', 'abbr': 'listen(Port, Options) -> {ok, ListenSocket} | {error, Reason}', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'recv(', 'kind': 'f', 'abbr': 'recv(Socket, Length) -> {ok, Packet} | {error, Reason}', 'dup': 1}, {'word': 'recv(', 'kind': 'f', 'abbr': 'recv(Socket, Length, Timeout) -> {ok, Packet} | {error, Reason}', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send(Socket, Packet) -> ok | {error, Reason}', 'dup': 1}, {'word': 'shutdown(', 'kind': 'f', 'abbr': 'shutdown(Socket, How) -> ok | {error, Reason}', 'dup': 1}, {'word': 'unrecv(', 'kind': 'f', 'abbr': 'unrecv/2', 'dup': 1}]}
{'rpc': [{'word': 'abcast(', 'kind': 'f', 'abbr': 'abcast(Name, Msg) -> abcast', 'dup': 1}, {'word': 'abcast(', 'kind': 'f', 'abbr': 'abcast(Nodes, Name, Msg) -> abcast', 'dup': 1}, {'word': 'async_call(', 'kind': 'f', 'abbr': 'async_call(Node, Module, Function, Args) -> Key', 'dup': 1}, {'word': 'block_call(', 'kind': 'f', 'abbr': 'block_call(Node, Module, Function, Args) -> Res | {badrpc, Reason}', 'dup': 1}, {'word': 'block_call(', 'kind': 'f', 'abbr': 'block_call/5', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call(Node, Module, Function, Args) -> Res | {badrpc, Reason}', 'dup': 1}, {'word': 'call(', 'kind': 'f', 'abbr': 'call/5', 'dup': 1}, {'word': 'cast(', 'kind': 'f', 'abbr': 'cast(Node, Module, Function, Args) -> true', 'dup': 1}, {'word': 'code_change(', 'kind': 'f', 'abbr': 'code_change/3', 'dup': 1}, {'word': 'eval_everywhere(', 'kind': 'f', 'abbr': 'eval_everywhere(Module, Function, Args) -> abcast', 'dup': 1}, {'word': 'eval_everywhere(', 'kind': 'f', 'abbr': 'eval_everywhere(Nodes, Module, Function, Args) -> abcast', 'dup': 1}, {'word': 'handle_call(', 'kind': 'f', 'abbr': 'handle_call/3', 'dup': 1}, {'word': 'handle_cast(', 'kind': 'f', 'abbr': 'handle_cast/2', 'dup': 1}, {'word': 'handle_info(', 'kind': 'f', 'abbr': 'handle_info/2', 'dup': 1}, {'word': 'init(', 'kind': 'f', 'abbr': 'init/1', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'multi_server_call(', 'kind': 'f', 'abbr': 'multi_server_call(Name, Msg) -> {Replies, BadNodes}', 'dup': 1}, {'word': 'multi_server_call(', 'kind': 'f', 'abbr': 'multi_server_call(Nodes, Name, Msg) -> {Replies, BadNodes}', 'dup': 1}, {'word': 'multicall(', 'kind': 'f', 'abbr': 'multicall(Module, Function, Args) -> {ResL, BadNodes}', 'dup': 1}, {'word': 'multicall(', 'kind': 'f', 'abbr': 'multicall(Nodes, Module, Function, Args) -> {ResL, BadNodes}@multicall(Module, Function, Args, Timeout) -> {ResL, BadNodes}', 'dup': 1}, {'word': 'multicall(', 'kind': 'f', 'abbr': 'multicall/5', 'dup': 1}, {'word': 'nb_yield(', 'kind': 'f', 'abbr': 'nb_yield(Key) -> {value, Val} | timeout', 'dup': 1}, {'word': 'nb_yield(', 'kind': 'f', 'abbr': 'nb_yield(Key, Timeout) -> {value, Val} | timeout', 'dup': 1}, {'word': 'parallel_eval(', 'kind': 'f', 'abbr': 'parallel_eval(FuncCalls) -> ResL', 'dup': 1}, {'word': 'pinfo(', 'kind': 'f', 'abbr': 'pinfo(Pid) -> [{Item, Info}] | undefined', 'dup': 1}, {'word': 'pinfo(', 'kind': 'f', 'abbr': 'pinfo(Pid, Item) -> {Item, Info} | undefined | []', 'dup': 1}, {'word': 'pmap(', 'kind': 'f', 'abbr': 'pmap(FuncSpec, ExtraArgs, List1) -> List2', 'dup': 1}, {'word': 'proxy_user_flush(', 'kind': 'f', 'abbr': 'proxy_user_flush/0', 'dup': 1}, {'word': 'safe_multi_server_call(', 'kind': 'f', 'abbr': 'safe_multi_server_call(Name, Msg) -> {Replies, BadNodes}', 'dup': 1}, {'word': 'safe_multi_server_call(', 'kind': 'f', 'abbr': 'safe_multi_server_call(Nodes, Name, Msg) -> {Replies, BadNodes}', 'dup': 1}, {'word': 'sbcast(', 'kind': 'f', 'abbr': 'sbcast(Name, Msg) -> {GoodNodes, BadNodes}', 'dup': 1}, {'word': 'sbcast(', 'kind': 'f', 'abbr': 'sbcast(Nodes, Name, Msg) -> {GoodNodes, BadNodes}', 'dup': 1}, {'word': 'server_call(', 'kind': 'f', 'abbr': 'server_call/4', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start/0', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link/0', 'dup': 1}, {'word': 'stop(', 'kind': 'f', 'abbr': 'stop/0', 'dup': 1}, {'word': 'terminate(', 'kind': 'f', 'abbr': 'terminate/2', 'dup': 1}, {'word': 'yield(', 'kind': 'f', 'abbr': 'yield(Key) -> Res | {badrpc, Reason}', 'dup': 1}]}
{'error_logger': [{'word': 'add_report_handler(', 'kind': 'f', 'abbr': 'add_report_handler(Handler) -> any()', 'dup': 1}, {'word': 'add_report_handler(', 'kind': 'f', 'abbr': 'add_report_handler(Handler, Args) -> Result', 'dup': 1}, {'word': 'delete_report_handler(', 'kind': 'f', 'abbr': 'delete_report_handler(Handler) -> Result', 'dup': 1}, {'word': 'error_info(', 'kind': 'f', 'abbr': 'error_info/1', 'dup': 1}, {'word': 'error_msg(', 'kind': 'f', 'abbr': 'error_msg(Format) -> ok', 'dup': 1}, {'word': 'error_msg(', 'kind': 'f', 'abbr': 'error_msg(Format, Data) -> ok', 'dup': 1}, {'word': 'error_report(', 'kind': 'f', 'abbr': 'error_report(Report) -> ok', 'dup': 1}, {'word': 'error_report(', 'kind': 'f', 'abbr': 'error_report(Type, Report) -> ok', 'dup': 1}, {'word': 'format(', 'kind': 'f', 'abbr': 'format(Format, Data) -> ok', 'dup': 1}, {'word': 'handle_call(', 'kind': 'f', 'abbr': 'handle_call/2', 'dup': 1}, {'word': 'handle_event(', 'kind': 'f', 'abbr': 'handle_event/2', 'dup': 1}, {'word': 'handle_info(', 'kind': 'f', 'abbr': 'handle_info/2', 'dup': 1}, {'word': 'info_msg(', 'kind': 'f', 'abbr': 'info_msg(Format) -> ok', 'dup': 1}, {'word': 'info_msg(', 'kind': 'f', 'abbr': 'info_msg(Format, Data) -> ok', 'dup': 1}, {'word': 'info_report(', 'kind': 'f', 'abbr': 'info_report(Report) -> ok', 'dup': 1}, {'word': 'info_report(', 'kind': 'f', 'abbr': 'info_report(Type, Report) -> ok', 'dup': 1}, {'word': 'init(', 'kind': 'f', 'abbr': 'init/1', 'dup': 1}, {'word': 'logfile(', 'kind': 'f', 'abbr': 'logfile(Request :: close) -> ok | {error, CloseReason}@logfile(Request :: filename) -> Filename | {error, FilenameReason}', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start/0', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link/0', 'dup': 1}, {'word': 'swap_handler(', 'kind': 'f', 'abbr': 'swap_handler/1', 'dup': 1}, {'word': 'terminate(', 'kind': 'f', 'abbr': 'terminate/2', 'dup': 1}, {'word': 'tty(', 'kind': 'f', 'abbr': 'tty(Flag) -> ok', 'dup': 1}, {'word': 'warning_map(', 'kind': 'f', 'abbr': 'warning_map() -> Tag', 'dup': 1}, {'word': 'warning_msg(', 'kind': 'f', 'abbr': 'warning_msg(Format) -> ok', 'dup': 1}, {'word': 'warning_msg(', 'kind': 'f', 'abbr': 'warning_msg(Format, Data) -> ok', 'dup': 1}, {'word': 'warning_report(', 'kind': 'f', 'abbr': 'warning_report(Report) -> ok', 'dup': 1}, {'word': 'warning_report(', 'kind': 'f', 'abbr': 'warning_report(Type, Report) -> ok', 'dup': 1}]}
{'re': [{'word': 'compile(', 'kind': 'f', 'abbr': 'compile(Regexp) -> {ok, MP} | {error, ErrSpec}', 'dup': 1}, {'word': 'compile(', 'kind': 'f', 'abbr': 'compile/2', 'dup': 1}, {'word': 'grun(', 'kind': 'f', 'abbr': 'grun/3', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'replace(', 'kind': 'f', 'abbr': 'replace(Subject, RE, Replacement) -> iodata() | \fBunicode:charlist()\fR\&', 'dup': 1}, {'word': 'replace(', 'kind': 'f', 'abbr': 'replace/4', 'dup': 1}, {'word': 'run(', 'kind': 'f', 'abbr': 'run/2', 'dup': 1}, {'word': 'run(', 'kind': 'f', 'abbr': 'run/3', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(Subject, RE) -> SplitList', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(Subject, RE, Options) -> SplitList', 'dup': 1}, {'word': 'ucompile(', 'kind': 'f', 'abbr': 'ucompile/2', 'dup': 1}, {'word': 'urun(', 'kind': 'f', 'abbr': 'urun/3', 'dup': 1}]}
{'auth': [{'word': 'code_change(', 'kind': 'f', 'abbr': 'code_change(OldVsn, State, Extra) -> {ok, state()}', 'dup': 1}, {'word': 'cookie(', 'kind': 'f', 'abbr': 'cookie() -> Cookie', 'dup': 1}, {'word': 'cookie(', 'kind': 'f', 'abbr': 'cookie(TheCookie) -> true', 'dup': 1}, {'word': 'get_cookie(', 'kind': 'f', 'abbr': 'get_cookie() -> nocookie | cookie()', 'dup': 1}, {'word': 'get_cookie(', 'kind': 'f', 'abbr': 'get_cookie(Node) -> nocookie | cookie()', 'dup': 1}, {'word': 'handle_call(', 'kind': 'f', 'abbr': 'handle_call(X1, From, State) -> {reply, hello | true | nocookie | cookie(), state()}', 'dup': 1}, {'word': 'handle_cast(', 'kind': 'f', 'abbr': 'handle_cast(X1, O) -> {noreply, state()}', 'dup': 1}, {'word': 'handle_info(', 'kind': 'f', 'abbr': 'handle_info(X1, O) -> {noreply, state()}', 'dup': 1}, {'word': 'init(', 'kind': 'f', 'abbr': 'init(X1) -> {ok, state()}', 'dup': 1}, {'word': 'is_auth(', 'kind': 'f', 'abbr': 'is_auth(Node) -> yes | no', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'node_cookie(', 'kind': 'f', 'abbr': 'node_cookie(Cookies) -> yes | no', 'dup': 1}, {'word': 'node_cookie(', 'kind': 'f', 'abbr': 'node_cookie(Node, Cookie) -> yes | no', 'dup': 1}, {'word': 'print(', 'kind': 'f', 'abbr': 'print(Node, Format, Args) -> ok', 'dup': 1}, {'word': 'set_cookie(', 'kind': 'f', 'abbr': 'set_cookie(Cookie) -> true', 'dup': 1}, {'word': 'set_cookie(', 'kind': 'f', 'abbr': 'set_cookie(Node, Cookie) -> true', 'dup': 1}, {'word': 'start_link(', 'kind': 'f', 'abbr': 'start_link() -> {ok, pid()} | {error, term()} | ignore', 'dup': 1}, {'word': 'sync_cookie(', 'kind': 'f', 'abbr': 'sync_cookie() -> any()', 'dup': 1}, {'word': 'terminate(', 'kind': 'f', 'abbr': 'terminate(Reason, State) -> ok', 'dup': 1}]}
{'binary': [{'word': 'at(', 'kind': 'f', 'abbr': 'at/2', 'dup': 1}, {'word': 'bin_to_list(', 'kind': 'f', 'abbr': 'bin_to_list/3', 'dup': 1}, {'word': 'bin_to_list(', 'kind': 'f', 'abbr': 'bin_to_list/2', 'dup': 1}, {'word': 'bin_to_list(', 'kind': 'f', 'abbr': 'bin_to_list/1', 'dup': 1}, {'word': 'compile_pattern(', 'kind': 'f', 'abbr': 'compile_pattern/1', 'dup': 1}, {'word': 'copy(', 'kind': 'f', 'abbr': 'copy/2', 'dup': 1}, {'word': 'copy(', 'kind': 'f', 'abbr': 'copy/1', 'dup': 1}, {'word': 'decode_unsigned(', 'kind': 'f', 'abbr': 'decode_unsigned/2', 'dup': 1}, {'word': 'decode_unsigned(', 'kind': 'f', 'abbr': 'decode_unsigned/1', 'dup': 1}, {'word': 'encode_unsigned(', 'kind': 'f', 'abbr': 'encode_unsigned/2', 'dup': 1}, {'word': 'encode_unsigned(', 'kind': 'f', 'abbr': 'encode_unsigned/1', 'dup': 1}, {'word': 'first(', 'kind': 'f', 'abbr': 'first/1', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last/1', 'dup': 1}, {'word': 'list_to_bin(', 'kind': 'f', 'abbr': 'list_to_bin/1', 'dup': 1}, {'word': 'longest_common_prefix(', 'kind': 'f', 'abbr': 'longest_common_prefix/1', 'dup': 1}, {'word': 'longest_common_suffix(', 'kind': 'f', 'abbr': 'longest_common_suffix/1', 'dup': 1}, {'word': 'match(', 'kind': 'f', 'abbr': 'match/3', 'dup': 1}, {'word': 'match(', 'kind': 'f', 'abbr': 'match/2', 'dup': 1}, {'word': 'matches(', 'kind': 'f', 'abbr': 'matches/3', 'dup': 1}, {'word': 'matches(', 'kind': 'f', 'abbr': 'matches/2', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'part(', 'kind': 'f', 'abbr': 'part/3', 'dup': 1}, {'word': 'part(', 'kind': 'f', 'abbr': 'part/2', 'dup': 1}, {'word': 'referenced_byte_size(', 'kind': 'f', 'abbr': 'referenced_byte_size/1', 'dup': 1}, {'word': 'replace(', 'kind': 'f', 'abbr': 'replace(Subject, Pattern, Replacement) -> Result', 'dup': 1}, {'word': 'replace(', 'kind': 'f', 'abbr': 'replace(Subject, Pattern, Replacement, Options) -> Result', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(Subject, Pattern) -> Parts', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(Subject, Pattern, Options) -> Parts', 'dup': 1}]}
{'dict': [{'word': 'append(', 'kind': 'f', 'abbr': 'append(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'append_list(', 'kind': 'f', 'abbr': 'append_list(Key, ValList, Dict1) -> Dict2', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase(Key, Dict1) -> Dict2', 'dup': 1}, {'word': 'fetch(', 'kind': 'f', 'abbr': 'fetch(Key, Dict) -> Value', 'dup': 1}, {'word': 'fetch_keys(', 'kind': 'f', 'abbr': 'fetch_keys(Dict) -> Keys', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, Dict1) -> Dict2', 'dup': 1}, {'word': 'find(', 'kind': 'f', 'abbr': 'find(Key, Dict) -> {ok, Value} | error', 'dup': 1}, {'word': 'fold(', 'kind': 'f', 'abbr': 'fold(Fun, Acc0, Dict) -> Acc1', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list(List) -> Dict', 'dup': 1}, {'word': 'is_key(', 'kind': 'f', 'abbr': 'is_key(Key, Dict) -> boolean()', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, Dict1, Dict2) -> Dict3', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> dict()', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size(Dict) -> non_neg_integer()', 'dup': 1}, {'word': 'store(', 'kind': 'f', 'abbr': 'store(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'to_list(', 'kind': 'f', 'abbr': 'to_list(Dict) -> List', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Initial, Dict1) -> Dict2', 'dup': 1}, {'word': 'update_counter(', 'kind': 'f', 'abbr': 'update_counter(Key, Increment, Dict1) -> Dict2', 'dup': 1}]}
{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> non_neg_integer()', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind/3', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember/3', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch/3', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge(Index, X, Y) -> [R]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge(Index, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf(F, T) -> [(T | X)]', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> non_neg_integer()', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind/3', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember/3', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch/3', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge(Index, X, Y) -> [R]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge(Index, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf(F, T) -> [(T | X)]', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'lib_role_title': [{'word': 'change_title_status(', 'kind': 'f', 'abbr': 'change_title_status/4', 'dup': 1}, {'word': 'get_expire_time(', 'kind': 'f', 'abbr': 'get_expire_time/0', 'dup': 1}, {'word': 'get_title_type_by_id(', 'kind': 'f', 'abbr': 'get_title_type_by_id/1', 'dup': 1}, {'word': 'give_title_to_role(', 'kind': 'f', 'abbr': 'give_title_to_role/4', 'dup': 1}, {'word': 'handle_activate_status(', 'kind': 'f', 'abbr': 'handle_activate_status/3', 'dup': 1}, {'word': 'handle_deactivate_status(', 'kind': 'f', 'abbr': 'handle_deactivate_status/3', 'dup': 1}, {'word': 'handle_give_title(', 'kind': 'f', 'abbr': 'handle_give_title/4', 'dup': 1}, {'word': 'init_title_template(', 'kind': 'f', 'abbr': 'init_title_template/0', 'dup': 1}, {'word': 'load_user_title(', 'kind': 'f', 'abbr': 'load_user_title/1', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'save_user_title(', 'kind': 'f', 'abbr': 'save_user_title/1', 'dup': 1}, {'word': 'send_title_status(', 'kind': 'f', 'abbr': 'send_title_status/1', 'dup': 1}]}
{'util': [{'word': 'bitstring_to_term(', 'kind': 'f', 'abbr': 'bitstring_to_term/1', 'dup': 1}, {'word': 'ceil(', 'kind': 'f', 'abbr': 'ceil/1', 'dup': 1}, {'word': 'explode(', 'kind': 'f', 'abbr': 'explode/2', 'dup': 1}, {'word': 'explode(', 'kind': 'f', 'abbr': 'explode/3', 'dup': 1}, {'word': 'floor(', 'kind': 'f', 'abbr': 'floor/1', 'dup': 1}, {'word': 'for(', 'kind': 'f', 'abbr': 'for/3', 'dup': 1}, {'word': 'for(', 'kind': 'f', 'abbr': 'for/2', 'dup': 1}, {'word': 'for(', 'kind': 'f', 'abbr': 'for/4', 'dup': 1}, {'word': 'forlist(', 'kind': 'f', 'abbr': 'forlist/3', 'dup': 1}, {'word': 'get_day_of_the_week(', 'kind': 'f', 'abbr': 'get_day_of_the_week/0', 'dup': 1}, {'word': 'get_diff_days(', 'kind': 'f', 'abbr': 'get_diff_days/2', 'dup': 1}, {'word': 'get_diff_days_new(', 'kind': 'f', 'abbr': 'get_diff_days_new/2', 'dup': 1}, {'word': 'get_ets_info(', 'kind': 'f', 'abbr': 'get_ets_info/2', 'dup': 1}, {'word': 'get_ets_list(', 'kind': 'f', 'abbr': 'get_ets_list/2', 'dup': 1}, {'word': 'get_int_date(', 'kind': 'f', 'abbr': 'get_int_date/0', 'dup': 1}, {'word': 'get_list(', 'kind': 'f', 'abbr': 'get_list/2', 'dup': 1}, {'word': 'get_midnight_seconds(', 'kind': 'f', 'abbr': 'get_midnight_seconds/1', 'dup': 1}, {'word': 'get_next_day_seconds(', 'kind': 'f', 'abbr': 'get_next_day_seconds/1', 'dup': 1}, {'word': 'get_today0(', 'kind': 'f', 'abbr': 'get_today0/0', 'dup': 1}, {'word': 'get_today_current_second(', 'kind': 'f', 'abbr': 'get_today_current_second/0', 'dup': 1}, {'word': 'implode(', 'kind': 'f', 'abbr': 'implode/2', 'dup': 1}, {'word': 'implode(', 'kind': 'f', 'abbr': 'implode/3', 'dup': 1}, {'word': 'is_all_equal(', 'kind': 'f', 'abbr': 'is_all_equal/1', 'dup': 1}, {'word': 'is_same_date(', 'kind': 'f', 'abbr': 'is_same_date/2', 'dup': 1}, {'word': 'is_same_date_new(', 'kind': 'f', 'abbr': 'is_same_date_new/2', 'dup': 1}, {'word': 'is_same_week(', 'kind': 'f', 'abbr': 'is_same_week/2', 'dup': 1}, {'word': 'log(', 'kind': 'f', 'abbr': 'log/5', 'dup': 1}, {'word': 'log(', 'kind': 'f', 'abbr': 'log/7', 'dup': 1}, {'word': 'log1(', 'kind': 'f', 'abbr': 'log1/5', 'dup': 1}, {'word': 'log_chat(', 'kind': 'f', 'abbr': 'log_chat/4', 'dup': 1}, {'word': 'log_info(', 'kind': 'f', 'abbr': 'log_info/1', 'dup': 1}, {'word': 'log_info(', 'kind': 'f', 'abbr': 'log_info/3', 'dup': 1}, {'word': 'longunixtime(', 'kind': 'f', 'abbr': 'longunixtime/0', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max/2', 'dup': 1}, {'word': 'md5(', 'kind': 'f', 'abbr': 'md5/1', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'my_rand(', 'kind': 'f', 'abbr': 'my_rand/2', 'dup': 1}, {'word': 'rand(', 'kind': 'f', 'abbr': 'rand/2', 'dup': 1}, {'word': 'seconds_to_localtime(', 'kind': 'f', 'abbr': 'seconds_to_localtime/1', 'dup': 1}, {'word': 'shuffle_list(', 'kind': 'f', 'abbr': 'shuffle_list/1', 'dup': 1}, {'word': 'sleep(', 'kind': 'f', 'abbr': 'sleep/1', 'dup': 1}, {'word': 'sleep(', 'kind': 'f', 'abbr': 'sleep/2', 'dup': 1}, {'word': 'string_to_term(', 'kind': 'f', 'abbr': 'string_to_term/1', 'dup': 1}, {'word': 'term_to_bitstring(', 'kind': 'f', 'abbr': 'term_to_bitstring/1', 'dup': 1}, {'word': 'term_to_string(', 'kind': 'f', 'abbr': 'term_to_string/1', 'dup': 1}, {'word': 'typeof(', 'kind': 'f', 'abbr': 'typeof/1', 'dup': 1}, {'word': 'unixtime(', 'kind': 'f', 'abbr': 'unixtime/0', 'dup': 1}]}
{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> non_neg_integer()', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind/3', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember/3', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch/3', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge(Index, X, Y) -> [R]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge(Index, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf(F, T) -> [(T | X)]', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'lists': [{'word': 'all(', 'kind': 'f', 'abbr': 'all(Pred, List) -> boolean()', 'dup': 1}, {'word': 'any(', 'kind': 'f', 'abbr': 'any(Pred, List) -> boolean()', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List1, List2) -> List3', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(ListOfLists) -> List1', 'dup': 1}, {'word': 'concat(', 'kind': 'f', 'abbr': 'concat(Things) -> string()', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Elem, List1) -> List2', 'dup': 1}, {'word': 'dropwhile(', 'kind': 'f', 'abbr': 'dropwhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'duplicate(', 'kind': 'f', 'abbr': 'duplicate(N, Elem) -> List', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, List1) -> List2', 'dup': 1}, {'word': 'flatlength(', 'kind': 'f', 'abbr': 'flatlength(DeepList) -> non_neg_integer()', 'dup': 1}, {'word': 'flatmap(', 'kind': 'f', 'abbr': 'flatmap(Fun, List1) -> List2', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList) -> List', 'dup': 1}, {'word': 'flatten(', 'kind': 'f', 'abbr': 'flatten(DeepList, Tail) -> List', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Fun, Acc0, List) -> Acc1', 'dup': 1}, {'word': 'foreach(', 'kind': 'f', 'abbr': 'foreach(Fun, List) -> ok', 'dup': 1}, {'word': 'keydelete(', 'kind': 'f', 'abbr': 'keydelete(Key, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keyfind(', 'kind': 'f', 'abbr': 'keyfind/3', 'dup': 1}, {'word': 'keymap(', 'kind': 'f', 'abbr': 'keymap(Fun, N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keymember(', 'kind': 'f', 'abbr': 'keymember/3', 'dup': 1}, {'word': 'keymerge(', 'kind': 'f', 'abbr': 'keymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'keyreplace(', 'kind': 'f', 'abbr': 'keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keysearch(', 'kind': 'f', 'abbr': 'keysearch/3', 'dup': 1}, {'word': 'keysort(', 'kind': 'f', 'abbr': 'keysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'keystore(', 'kind': 'f', 'abbr': 'keystore(Key, N, TupleList1, NewTuple) -> TupleList2', 'dup': 1}, {'word': 'keytake(', 'kind': 'f', 'abbr': 'keytake(Key, N, TupleList1) -> {value, Tuple, TupleList2} | false', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(List) -> Last', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, List1) -> List2', 'dup': 1}, {'word': 'mapfoldl(', 'kind': 'f', 'abbr': 'mapfoldl(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'mapfoldr(', 'kind': 'f', 'abbr': 'mapfoldr(Fun, Acc0, List1) -> {List2, Acc1}', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(List) -> Max', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member/2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(ListOfLists) -> List1', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(List1, List2) -> List3', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'merge3(', 'kind': 'f', 'abbr': 'merge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(List) -> Min', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'nth(', 'kind': 'f', 'abbr': 'nth(N, List) -> Elem', 'dup': 1}, {'word': 'nthtail(', 'kind': 'f', 'abbr': 'nthtail(N, List) -> Tail', 'dup': 1}, {'word': 'partition(', 'kind': 'f', 'abbr': 'partition(Pred, List) -> {Satisfying, NotSatisfying}', 'dup': 1}, {'word': 'prefix(', 'kind': 'f', 'abbr': 'prefix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse(List1) -> List2', 'dup': 1}, {'word': 'reverse(', 'kind': 'f', 'abbr': 'reverse/2', 'dup': 1}, {'word': 'rkeymerge(', 'kind': 'f', 'abbr': 'rkeymerge(Index, X, Y) -> [R]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge(', 'kind': 'f', 'abbr': 'rmerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rmerge3(', 'kind': 'f', 'abbr': 'rmerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'rukeymerge(', 'kind': 'f', 'abbr': 'rukeymerge(Index, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(Fun, X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge(', 'kind': 'f', 'abbr': 'rumerge(X, Y) -> [(X | Y)]', 'dup': 1}, {'word': 'rumerge3(', 'kind': 'f', 'abbr': 'rumerge3(X, Y, Z) -> [(X | Y | Z)]', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To) -> Seq', 'dup': 1}, {'word': 'seq(', 'kind': 'f', 'abbr': 'seq(From, To, Incr) -> Seq', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(List1) -> List2', 'dup': 1}, {'word': 'sort(', 'kind': 'f', 'abbr': 'sort(Fun, List1) -> List2', 'dup': 1}, {'word': 'split(', 'kind': 'f', 'abbr': 'split(N, List1) -> {List2, List3}', 'dup': 1}, {'word': 'splitwith(', 'kind': 'f', 'abbr': 'splitwith(Pred, List) -> {List1, List2}', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Start, Len) -> List2', 'dup': 1}, {'word': 'sublist(', 'kind': 'f', 'abbr': 'sublist(List1, Len) -> List2', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(List1, List2) -> List3', 'dup': 1}, {'word': 'suffix(', 'kind': 'f', 'abbr': 'suffix(List1, List2) -> boolean()', 'dup': 1}, {'word': 'sum(', 'kind': 'f', 'abbr': 'sum(List) -> number()', 'dup': 1}, {'word': 'takewhile(', 'kind': 'f', 'abbr': 'takewhile(Pred, List1) -> List2', 'dup': 1}, {'word': 'ukeymerge(', 'kind': 'f', 'abbr': 'ukeymerge(N, TupleList1, TupleList2) -> TupleList3', 'dup': 1}, {'word': 'ukeysort(', 'kind': 'f', 'abbr': 'ukeysort(N, TupleList1) -> TupleList2', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(Fun, List1, List2) -> List3', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(ListOfLists) -> List1', 'dup': 1}, {'word': 'umerge(', 'kind': 'f', 'abbr': 'umerge(List1, List2) -> List3', 'dup': 1}, {'word': 'umerge3(', 'kind': 'f', 'abbr': 'umerge3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'unzip(', 'kind': 'f', 'abbr': 'unzip(List1) -> {List2, List3}', 'dup': 1}, {'word': 'unzip3(', 'kind': 'f', 'abbr': 'unzip3(List1) -> {List2, List3, List4}', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(Fun, List1) -> List2', 'dup': 1}, {'word': 'usort(', 'kind': 'f', 'abbr': 'usort(List1) -> List2', 'dup': 1}, {'word': 'zf(', 'kind': 'f', 'abbr': 'zf(F, T) -> [(T | X)]', 'dup': 1}, {'word': 'zip(', 'kind': 'f', 'abbr': 'zip(List1, List2) -> List3', 'dup': 1}, {'word': 'zip3(', 'kind': 'f', 'abbr': 'zip3(List1, List2, List3) -> List4', 'dup': 1}, {'word': 'zipwith(', 'kind': 'f', 'abbr': 'zipwith(Combine, List1, List2) -> List3', 'dup': 1}, {'word': 'zipwith3(', 'kind': 'f', 'abbr': 'zipwith3(Combine, List1, List2, List3) -> List4', 'dup': 1}]}
{'lists': [{'word': 'escript(', 'kind': 'f', 'abbr': 'escript: Failed to open file: C:\Documents', 'dup': 1}]}
